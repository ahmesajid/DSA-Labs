	if (node == nullptr)
	{
		return new BNode<T>(key);
	}
	if (key < node->data)
		node->left = insertNode(node->left, key);
	else if (key > node->data)
		node->right = insertNode(node->right, key);

	/* 2. Update height of this ancestor node */
	node->height = 1 + max(heightOfNode(node->left), heightOfNode(node->right));

	/* 3. Get the balance factor of this ancestor
		node to check whether this node became
		unbalanced */
	int balance = getBalance(node);

	if (balance > 1 && key < node->left->data)
	{
		return rightRotate(node);
	}

	// Right Right Case  
	if (balance < -1 && key > node->right->data)
	{
		return leftRotate(node);
	}

	// Left Right Case  
	if (balance > 1 && key > node->left->data)
	{
		node->left = leftRotate(node->left);
		return rightRotate(node);
	}

	// Right Left Case  
	if (balance < -1 && key < node->right->data)
	{
		node->right = rightRotate(node->right);
		return leftRotate(node);
	}

	/* return the (unchanged) node pointer */
	return node;
