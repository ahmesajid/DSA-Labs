#include<iostream>
#include<iostream>
#include<string>
using namespace std;
int checkEquationValidity(string equation);
bool checkParenthesisBalance(string equation);
string infixToPostfix(string expression);

class Stack {
	char*arr;
	int size;
	int top;

public:
	Stack(int size = 0)
	{
		this->size = size;
		arr = new char[size];
		top = -1;
	}

	Stack(const Stack&S)
	{
		if (size >= S.size)
		{
			for (int i = 0; i < size; i++)
			{
				arr[i] = S.arr[i];
			}
			cout << "Data copied sucessfully!";
		}
		else
		{
			cout << "Stack size not compatible!";
		}
	}

	void push(int element)
	{
		if (!isFull())
		{
			top++;
			arr[top] = element;
		}
		else
		{
			cout << "Stack is full!";
		}
	}

	char pop()
	{
		if (!isEmpty())
		{
			return arr[top--];
		}
		return 0;
	}

	int getTop()
	{
		if (!isEmpty())
		{
			return arr[top];
		}
		return 0;
	}

	bool isFull()
	{
		return size == top + 1;
	}

	bool isEmpty()
	{
		return top == -1;
	}

	~Stack()
	{
		if (!isEmpty())
		{
			delete[] arr;
			arr = nullptr;
			top = -1;
			size = 0;
		}
		cout << "Destructor called!\n";
	}
};
bool checkParenthesisBalance(string equation)
{
	Stack tempStack(200);
	bool status = true;
	int counter = 0;

	while (equation[counter] != '\0' && status)
	{
		switch (equation[counter])
		{
		case '(':
		{
			tempStack.push('(');
			break;
		}
		case '[':
		{
			tempStack.push('[');
			break;
		}
		case '{':
		{
			tempStack.push('{');
			break;
		}
		case ']':
		{
			if (!tempStack.isEmpty())
			{
				if (tempStack.pop() != '[')
				{
					status = false;
				}
			}

			break;
		}
		case ')':
		{
			if (!tempStack.isEmpty())
			{
				if (tempStack.pop() != '(')
				{
					status = false;
				}
			}
			
			break;
		}
		case '}':
		{
			if (!tempStack.isEmpty())
			{
				if (tempStack.pop() != '{')
				{
					status = false;
				}
			}
			
			break;
		}
		}
		counter++;
	}

	if (!tempStack.isEmpty())
		return false;
	return status;

}
int checkEquationValidity(string equation)
{
	int numOfOperators = 0 , numOfOperands = 0 , counter = 0;
	
	while (equation[counter] != '\0')
	{
		switch (equation[counter])
		{
		case '*':
		case '/':
		case '-':
		case '+':
		{
			numOfOperators++;
			break;
		}
		}
		counter++;
	}

	counter = 0;
	while (equation[counter] != '\0')
	{
		int temp = int(equation[counter]);
		if( (temp > 64 && temp < 91) || (temp > 96 && temp < 123) || (temp > 47 && temp < 58) )
		{
			numOfOperands++;
		}
		counter++;
	}


	return ((numOfOperands-1) == numOfOperators);

}
int main()
{
	Stack S(20);
	string getUserExpression = "xyz";
	getline(cin, getUserExpression);
	bool isParenthesisBalanced, isEquationValid;

	isParenthesisBalanced = checkParenthesisBalance(getUserExpression);
	isEquationValid = checkEquationValidity(getUserExpression);

	if (isParenthesisBalanced)
		cout << "Parenthesis balanced!\n";
	else
		cout << "Parenthesis are not balanced!\n";

	if (isEquationValid)
		cout << "Operator-operands are balanced!\n";
	else
		cout << "Operator-operands are not balanced!\n";




	cout << '\n';
	return 0;
}
